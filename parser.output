Grammar

    0 $accept: program $end

    1 program: classList

    2 classList: class
    3          | classList class

    4 class: "class" "type-identifier" classBody
    5      | "class" "type-identifier" "extends" "type-identifier" classBody

    6 classBody: "{" classBodyContent "}"

    7 classBodyContent: classBodyContent field
    8                 | classBodyContent method
    9                 | %empty

   10 field: "object-identifier" ":" type ";"
   11      | "object-identifier" ":" type "<-" expr ";"

   12 method: "object-identifier" "(" formals ")" ":" type block

   13 type: "type-identifier"
   14     | "int32"
   15     | "bool"
   16     | "string"
   17     | "unit"

   18 formals: formal
   19        | formal "," formals

   20 formal: "object-identifier" ":" type

   21 block: "{" exprList "}"

   22 exprList: expr
   23         | expr ";" exprList

   24 expr: ifExpr
   25     | whileExpr
   26     | letExpr
   27     | assignExpr
   28     | unOpExpr
   29     | binOpExpr
   30     | callExpr
   31     | newExpr
   32     | "object-identifier"
   33     | "self"
   34     | literal
   35     | "(" ")"
   36     | "(" expr ")"
   37     | block

   38 args: expr
   39     | expr "," args
   40     | %empty

   41 ifExpr: "if" expr "then" expr
   42       | "if" expr "then" expr "else" expr

   43 whileExpr: "while" expr "do" expr

   44 letExpr: "let" "object-identifier" ":" type "in" expr
   45        | "let" "object-identifier" ":" type "<-" expr "in" expr

   46 assignExpr: "object-identifier" "<-" expr

   47 unOpExpr: "not" expr
   48         | "-" expr
   49         | "isnull" expr

   50 binOpExpr: expr "=" expr
   51          | expr "<" expr
   52          | expr "<=" expr
   53          | expr "+" expr
   54          | expr "-" expr
   55          | expr "*" expr
   56          | expr "/" expr
   57          | expr "^" expr
   58          | expr "and" expr

   59 callExpr: "object-identifier" "(" args ")"
   60         | expr "." "object-identifier" "(" args ")"

   61 newExpr: "new" "type-identifier"

   62 literal: "integer-literal"
   63        | "string-literal"
   64        | boolean-literal

   65 boolean-literal: "true"
   66                | "false"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    "{" (258) 6 21
    "}" (259) 6 21
    "(" (260) 12 35 36 59 60
    ")" (261) 12 35 36 59 60
    ":" (262) 10 11 12 20 44 45
    ";" (263) 10 11 23
    "," (264) 19 39
    "+" (265) 53
    "-" (266) 48 54
    "*" (267) 55
    "/" (268) 56
    "^" (269) 57
    "." (270) 60
    "=" (271) 50
    "<" (272) 51
    "<=" (273) 52
    "<-" (274) 11 45 46
    "and" (275) 58
    "bool" (276) 15
    "class" (277) 4 5
    "do" (278) 43
    "else" (279) 42
    "extends" (280) 5
    "false" (281) 66
    "if" (282) 41 42
    "in" (283) 44 45
    "int32" (284) 14
    "isnull" (285) 49
    "let" (286) 44 45
    "new" (287) 61
    "not" (288) 47
    "self" (289) 33
    "string" (290) 16
    "then" (291) 41 42
    "true" (292) 65
    "unit" (293) 17
    "while" (294) 43
    "integer-literal" <int> (295) 62
    "string-literal" <std::string> (296) 63
    "type-identifier" <std::string> (297) 4 5 13 61
    "object-identifier" <std::string> (298) 10 11 12 20 32 44 45 46 59 60
    UNARYMINUS (299)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1
        on right: 0
    classList (47)
        on left: 2 3
        on right: 1 3
    class (48)
        on left: 4 5
        on right: 2 3
    classBody (49)
        on left: 6
        on right: 4 5
    classBodyContent (50)
        on left: 7 8 9
        on right: 6 7 8
    field (51)
        on left: 10 11
        on right: 7
    method (52)
        on left: 12
        on right: 8
    type (53)
        on left: 13 14 15 16 17
        on right: 10 11 12 20 44 45
    formals (54)
        on left: 18 19
        on right: 12 19
    formal (55)
        on left: 20
        on right: 18 19
    block (56)
        on left: 21
        on right: 12 37
    exprList (57)
        on left: 22 23
        on right: 21 23
    expr (58)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37
        on right: 11 22 23 36 38 39 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 60
    args (59)
        on left: 38 39 40
        on right: 39 59 60
    ifExpr (60)
        on left: 41 42
        on right: 24
    whileExpr (61)
        on left: 43
        on right: 25
    letExpr (62)
        on left: 44 45
        on right: 26
    assignExpr (63)
        on left: 46
        on right: 27
    unOpExpr (64)
        on left: 47 48 49
        on right: 28
    binOpExpr (65)
        on left: 50 51 52 53 54 55 56 57 58
        on right: 29
    callExpr (66)
        on left: 59 60
        on right: 30
    newExpr (67)
        on left: 61
        on right: 31
    literal (68)
        on left: 62 63 64
        on right: 34
    boolean-literal (69)
        on left: 65 66
        on right: 64


State 0

    0 $accept: . program $end

    "class"  shift, and go to state 1

    program    go to state 2
    classList  go to state 3
    class      go to state 4


State 1

    4 class: "class" . "type-identifier" classBody
    5      | "class" . "type-identifier" "extends" "type-identifier" classBody

    "type-identifier"  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: classList .
    3 classList: classList . class

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class  go to state 7


State 4

    2 classList: class .

    $default  reduce using rule 2 (classList)


State 5

    4 class: "class" "type-identifier" . classBody
    5      | "class" "type-identifier" . "extends" "type-identifier" classBody

    "{"        shift, and go to state 8
    "extends"  shift, and go to state 9

    classBody  go to state 10


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 classList: classList class .

    $default  reduce using rule 3 (classList)


State 8

    6 classBody: "{" . classBodyContent "}"

    $default  reduce using rule 9 (classBodyContent)

    classBodyContent  go to state 11


State 9

    5 class: "class" "type-identifier" "extends" . "type-identifier" classBody

    "type-identifier"  shift, and go to state 12


State 10

    4 class: "class" "type-identifier" classBody .

    $default  reduce using rule 4 (class)


State 11

    6 classBody: "{" classBodyContent . "}"
    7 classBodyContent: classBodyContent . field
    8                 | classBodyContent . method

    "}"                  shift, and go to state 13
    "object-identifier"  shift, and go to state 14

    field   go to state 15
    method  go to state 16


State 12

    5 class: "class" "type-identifier" "extends" "type-identifier" . classBody

    "{"  shift, and go to state 8

    classBody  go to state 17


State 13

    6 classBody: "{" classBodyContent "}" .

    $default  reduce using rule 6 (classBody)


State 14

   10 field: "object-identifier" . ":" type ";"
   11      | "object-identifier" . ":" type "<-" expr ";"
   12 method: "object-identifier" . "(" formals ")" ":" type block

    "("  shift, and go to state 18
    ":"  shift, and go to state 19


State 15

    7 classBodyContent: classBodyContent field .

    $default  reduce using rule 7 (classBodyContent)


State 16

    8 classBodyContent: classBodyContent method .

    $default  reduce using rule 8 (classBodyContent)


State 17

    5 class: "class" "type-identifier" "extends" "type-identifier" classBody .

    $default  reduce using rule 5 (class)


State 18

   12 method: "object-identifier" "(" . formals ")" ":" type block

    "object-identifier"  shift, and go to state 20

    formals  go to state 21
    formal   go to state 22


State 19

   10 field: "object-identifier" ":" . type ";"
   11      | "object-identifier" ":" . type "<-" expr ";"

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 28


State 20

   20 formal: "object-identifier" . ":" type

    ":"  shift, and go to state 29


State 21

   12 method: "object-identifier" "(" formals . ")" ":" type block

    ")"  shift, and go to state 30


State 22

   18 formals: formal .
   19        | formal . "," formals

    ","  shift, and go to state 31

    $default  reduce using rule 18 (formals)


State 23

   15 type: "bool" .

    $default  reduce using rule 15 (type)


State 24

   14 type: "int32" .

    $default  reduce using rule 14 (type)


State 25

   16 type: "string" .

    $default  reduce using rule 16 (type)


State 26

   17 type: "unit" .

    $default  reduce using rule 17 (type)


State 27

   13 type: "type-identifier" .

    $default  reduce using rule 13 (type)


State 28

   10 field: "object-identifier" ":" type . ";"
   11      | "object-identifier" ":" type . "<-" expr ";"

    ";"   shift, and go to state 32
    "<-"  shift, and go to state 33


State 29

   20 formal: "object-identifier" ":" . type

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 34


State 30

   12 method: "object-identifier" "(" formals ")" . ":" type block

    ":"  shift, and go to state 35


State 31

   19 formals: formal "," . formals

    "object-identifier"  shift, and go to state 20

    formals  go to state 36
    formal   go to state 22


State 32

   10 field: "object-identifier" ":" type ";" .

    $default  reduce using rule 10 (field)


State 33

   11 field: "object-identifier" ":" type "<-" . expr ";"

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 53
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 34

   20 formal: "object-identifier" ":" type .

    $default  reduce using rule 20 (formal)


State 35

   12 method: "object-identifier" "(" formals ")" ":" . type block

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 64


State 36

   19 formals: formal "," formals .

    $default  reduce using rule 19 (formals)


State 37

   21 block: "{" . exprList "}"

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    exprList         go to state 65
    expr             go to state 66
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 38

   35 expr: "(" . ")"
   36     | "(" . expr ")"

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    ")"                  shift, and go to state 67
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 68
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 39

   48 unOpExpr: "-" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 69
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 40

   66 boolean-literal: "false" .

    $default  reduce using rule 66 (boolean-literal)


State 41

   41 ifExpr: "if" . expr "then" expr
   42       | "if" . expr "then" expr "else" expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 70
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 42

   49 unOpExpr: "isnull" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 71
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 43

   44 letExpr: "let" . "object-identifier" ":" type "in" expr
   45        | "let" . "object-identifier" ":" type "<-" expr "in" expr

    "object-identifier"  shift, and go to state 72


State 44

   61 newExpr: "new" . "type-identifier"

    "type-identifier"  shift, and go to state 73


State 45

   47 unOpExpr: "not" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 74
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 46

   33 expr: "self" .

    $default  reduce using rule 33 (expr)


State 47

   65 boolean-literal: "true" .

    $default  reduce using rule 65 (boolean-literal)


State 48

   43 whileExpr: "while" . expr "do" expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 75
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 49

   62 literal: "integer-literal" .

    $default  reduce using rule 62 (literal)


State 50

   63 literal: "string-literal" .

    $default  reduce using rule 63 (literal)


State 51

   32 expr: "object-identifier" .
   46 assignExpr: "object-identifier" . "<-" expr
   59 callExpr: "object-identifier" . "(" args ")"

    "("   shift, and go to state 76
    "<-"  shift, and go to state 77

    $default  reduce using rule 32 (expr)


State 52

   37 expr: block .

    $default  reduce using rule 37 (expr)


State 53

   11 field: "object-identifier" ":" type "<-" expr . ";"
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    ";"    shift, and go to state 78
    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88


State 54

   24 expr: ifExpr .

    $default  reduce using rule 24 (expr)


State 55

   25 expr: whileExpr .

    $default  reduce using rule 25 (expr)


State 56

   26 expr: letExpr .

    $default  reduce using rule 26 (expr)


State 57

   27 expr: assignExpr .

    $default  reduce using rule 27 (expr)


State 58

   28 expr: unOpExpr .

    $default  reduce using rule 28 (expr)


State 59

   29 expr: binOpExpr .

    $default  reduce using rule 29 (expr)


State 60

   30 expr: callExpr .

    $default  reduce using rule 30 (expr)


State 61

   31 expr: newExpr .

    $default  reduce using rule 31 (expr)


State 62

   34 expr: literal .

    $default  reduce using rule 34 (expr)


State 63

   64 literal: boolean-literal .

    $default  reduce using rule 64 (literal)


State 64

   12 method: "object-identifier" "(" formals ")" ":" type . block

    "{"  shift, and go to state 37

    block  go to state 89


State 65

   21 block: "{" exprList . "}"

    "}"  shift, and go to state 90


State 66

   22 exprList: expr .
   23         | expr . ";" exprList
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    ";"    shift, and go to state 91
    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 22 (exprList)


State 67

   35 expr: "(" ")" .

    $default  reduce using rule 35 (expr)


State 68

   36 expr: "(" expr . ")"
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    ")"    shift, and go to state 92
    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88


State 69

   48 unOpExpr: "-" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 48 (unOpExpr)


State 70

   41 ifExpr: "if" expr . "then" expr
   42       | "if" expr . "then" expr "else" expr
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"     shift, and go to state 79
    "-"     shift, and go to state 80
    "*"     shift, and go to state 81
    "/"     shift, and go to state 82
    "^"     shift, and go to state 83
    "."     shift, and go to state 84
    "="     shift, and go to state 85
    "<"     shift, and go to state 86
    "<="    shift, and go to state 87
    "and"   shift, and go to state 88
    "then"  shift, and go to state 93


State 71

   49 unOpExpr: "isnull" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 49 (unOpExpr)


State 72

   44 letExpr: "let" "object-identifier" . ":" type "in" expr
   45        | "let" "object-identifier" . ":" type "<-" expr "in" expr

    ":"  shift, and go to state 94


State 73

   61 newExpr: "new" "type-identifier" .

    $default  reduce using rule 61 (newExpr)


State 74

   47 unOpExpr: "not" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "and"  shift, and go to state 88

    $default  reduce using rule 47 (unOpExpr)


State 75

   43 whileExpr: "while" expr . "do" expr
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88
    "do"   shift, and go to state 95


State 76

   59 callExpr: "object-identifier" "(" . args ")"

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    $default  reduce using rule 40 (args)

    block            go to state 52
    expr             go to state 96
    args             go to state 97
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 77

   46 assignExpr: "object-identifier" "<-" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 98
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 78

   11 field: "object-identifier" ":" type "<-" expr ";" .

    $default  reduce using rule 11 (field)


State 79

   53 binOpExpr: expr "+" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 99
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 80

   54 binOpExpr: expr "-" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 100
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 81

   55 binOpExpr: expr "*" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 101
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 82

   56 binOpExpr: expr "/" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 102
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 83

   57 binOpExpr: expr "^" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 103
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 84

   60 callExpr: expr "." . "object-identifier" "(" args ")"

    "object-identifier"  shift, and go to state 104


State 85

   50 binOpExpr: expr "=" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 105
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 86

   51 binOpExpr: expr "<" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 106
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 87

   52 binOpExpr: expr "<=" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 107
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 88

   58 binOpExpr: expr "and" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 108
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 89

   12 method: "object-identifier" "(" formals ")" ":" type block .

    $default  reduce using rule 12 (method)


State 90

   21 block: "{" exprList "}" .

    $default  reduce using rule 21 (block)


State 91

   23 exprList: expr ";" . exprList

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    exprList         go to state 109
    expr             go to state 66
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 92

   36 expr: "(" expr ")" .

    $default  reduce using rule 36 (expr)


State 93

   41 ifExpr: "if" expr "then" . expr
   42       | "if" expr "then" . expr "else" expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 110
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 94

   44 letExpr: "let" "object-identifier" ":" . type "in" expr
   45        | "let" "object-identifier" ":" . type "<-" expr "in" expr

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 111


State 95

   43 whileExpr: "while" expr "do" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 112
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 96

   38 args: expr .
   39     | expr . "," args
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    ","    shift, and go to state 113
    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 38 (args)


State 97

   59 callExpr: "object-identifier" "(" args . ")"

    ")"  shift, and go to state 114


State 98

   46 assignExpr: "object-identifier" "<-" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 46 (assignExpr)


State 99

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   53          | expr "+" expr .
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 53 (binOpExpr)


State 100

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   54          | expr "-" expr .
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 54 (binOpExpr)


State 101

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   55          | expr "*" expr .
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 55 (binOpExpr)


State 102

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   56          | expr "/" expr .
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 56 (binOpExpr)


State 103

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   57          | expr "^" expr .
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88

    $default  reduce using rule 57 (binOpExpr)


State 104

   60 callExpr: expr "." "object-identifier" . "(" args ")"

    "("  shift, and go to state 115


State 105

   50 binOpExpr: expr . "=" expr
   50          | expr "=" expr .
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "and"  shift, and go to state 88

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 50 (binOpExpr)


State 106

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   51          | expr "<" expr .
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "and"  shift, and go to state 88

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 51 (binOpExpr)


State 107

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   52          | expr "<=" expr .
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "and"  shift, and go to state 88

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 52 (binOpExpr)


State 108

   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   58          | expr "and" expr .
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 58 (binOpExpr)


State 109

   23 exprList: expr ";" exprList .

    $default  reduce using rule 23 (exprList)


State 110

   41 ifExpr: "if" expr "then" expr .
   42       | "if" expr "then" expr . "else" expr
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "else"  shift, and go to state 116

    $default  reduce using rule 41 (ifExpr)


State 111

   44 letExpr: "let" "object-identifier" ":" type . "in" expr
   45        | "let" "object-identifier" ":" type . "<-" expr "in" expr

    "<-"  shift, and go to state 117
    "in"  shift, and go to state 118


State 112

   43 whileExpr: "while" expr "do" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 43 (whileExpr)


State 113

   39 args: expr "," . args

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    $default  reduce using rule 40 (args)

    block            go to state 52
    expr             go to state 96
    args             go to state 119
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 114

   59 callExpr: "object-identifier" "(" args ")" .

    $default  reduce using rule 59 (callExpr)


State 115

   60 callExpr: expr "." "object-identifier" "(" . args ")"

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    $default  reduce using rule 40 (args)

    block            go to state 52
    expr             go to state 96
    args             go to state 120
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 116

   42 ifExpr: "if" expr "then" expr "else" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 121
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 117

   45 letExpr: "let" "object-identifier" ":" type "<-" . expr "in" expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 122
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 118

   44 letExpr: "let" "object-identifier" ":" type "in" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 123
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 119

   39 args: expr "," args .

    $default  reduce using rule 39 (args)


State 120

   60 callExpr: expr "." "object-identifier" "(" args . ")"

    ")"  shift, and go to state 124


State 121

   42 ifExpr: "if" expr "then" expr "else" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 42 (ifExpr)


State 122

   45 letExpr: "let" "object-identifier" ":" type "<-" expr . "in" expr
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    "+"    shift, and go to state 79
    "-"    shift, and go to state 80
    "*"    shift, and go to state 81
    "/"    shift, and go to state 82
    "^"    shift, and go to state 83
    "."    shift, and go to state 84
    "="    shift, and go to state 85
    "<"    shift, and go to state 86
    "<="   shift, and go to state 87
    "and"  shift, and go to state 88
    "in"   shift, and go to state 125


State 123

   44 letExpr: "let" "object-identifier" ":" type "in" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 44 (letExpr)


State 124

   60 callExpr: expr "." "object-identifier" "(" args ")" .

    $default  reduce using rule 60 (callExpr)


State 125

   45 letExpr: "let" "object-identifier" ":" type "<-" expr "in" . expr

    "{"                  shift, and go to state 37
    "("                  shift, and go to state 38
    "-"                  shift, and go to state 39
    "false"              shift, and go to state 40
    "if"                 shift, and go to state 41
    "isnull"             shift, and go to state 42
    "let"                shift, and go to state 43
    "new"                shift, and go to state 44
    "not"                shift, and go to state 45
    "self"               shift, and go to state 46
    "true"               shift, and go to state 47
    "while"              shift, and go to state 48
    "integer-literal"    shift, and go to state 49
    "string-literal"     shift, and go to state 50
    "object-identifier"  shift, and go to state 51

    block            go to state 52
    expr             go to state 126
    ifExpr           go to state 54
    whileExpr        go to state 55
    letExpr          go to state 56
    assignExpr       go to state 57
    unOpExpr         go to state 58
    binOpExpr        go to state 59
    callExpr         go to state 60
    newExpr          go to state 61
    literal          go to state 62
    boolean-literal  go to state 63


State 126

   45 letExpr: "let" "object-identifier" ":" type "<-" expr "in" expr .
   50 binOpExpr: expr . "=" expr
   51          | expr . "<" expr
   52          | expr . "<=" expr
   53          | expr . "+" expr
   54          | expr . "-" expr
   55          | expr . "*" expr
   56          | expr . "/" expr
   57          | expr . "^" expr
   58          | expr . "and" expr
   60 callExpr: expr . "." "object-identifier" "(" args ")"

    $default  reduce using rule 45 (letExpr)
